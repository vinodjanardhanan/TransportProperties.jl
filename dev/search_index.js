var documenterSearchIndex = {"docs":
[{"location":"#TransportProperties","page":"Home","title":"TransportProperties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TransportProperties lets you calculate the viscosity, thermal conductivity and diffusion coefficients. The code relies on transport.dat for the evaluation of these properties. A sample of the transport.dat file is shown below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AR                 0   136.500     3.330     0.000     0.000     0.000\nCH4                2   141.400     3.746     0.000     2.600    13.000\nCO2                1   244.000     3.763     0.000     2.650     2.100\nCO                 1    98.100     3.650     0.000     1.950     1.800\nH2                 1    38.000     2.920     0.000     0.790   280.000\nH2O                2   572.400     2.605     1.844     0.000     4.000\nO2                 1   107.400     3.458     0.000     1.600     3.800","category":"page"},{"location":"","page":"Home","title":"Home","text":"The different columns present in the above table is described below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Column-1: Name of species\nColumn-2: Geometric configuration of the species; 0- single atom, 1- linear molecule, 2-nonlinear molecule\nColumn-3: Lennard-Jones potential well depth expressed as epsilonk_B and has units K\nColumn-4: Lennard-Jones collision diameter (sigma) in Angstroms\nColumn-5: Dipole moment (mu) in Debye\nColumn-6: Polarizability (alpha) in cubic Angstroms\nColumn-7: Rotational relaxation collision number (Z_mathrmrot) at 298 K","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for TransportProperties.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, use the following commands in the julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"TransportProperties\")","category":"page"},{"location":"#General-interfaces","page":"Home","title":"General interfaces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#TransportProperties.D_ii!-Tuple{Array{Float64}, Array{TransportProperties.TransportData}, Float64, Float64, Array{Float64}}","page":"Home","title":"TransportProperties.D_ii!","text":"Function to calculate self diffusion coefficients\n\nUsage\n\nD_ii!(D::Array{Float64},sp_trd::Array{TransportData}, T::Float64, p::Float64, molwt::Array{Float64})\n\nD : Array to store the diffusion coefficients (size N)    \nsp_trd : Array of species transport data \nT : Temperature (K) \np : Pressure (Pa \nmolwt : specoes molecular weights\n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.D_ij-Tuple{Array{TransportProperties.TransportData}, Float64, Float64, Array{Float64}}","page":"Home","title":"TransportProperties.D_ij","text":"Function for the calculation of binary diffusion coefficients\n\nUsage\n\nD_ij(sp_trd, T, p, molwt)\n\nsp_trd : Array of Species transport data \nT : Temperature K \np : Pressure Pa \nmolwt : Species molecular weight \n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.D_km!-Tuple{Array{Float64}, Any, Any, Any}","page":"Home","title":"TransportProperties.D_km!","text":"A function to calculate the mixture diffusion coefficients given the binary diffusion coefficients and the mole fractions\n\nUsage:\n\nDkm!(Dkm, Dij, molefracs, molwt )\n\nDkm : Array to store the mixture diffusion coefficients (size N)\nD_ij : N X N Matrix of binary diffusion coefficients\nmolefracs : Mole fractions \nmolwt : species molecular weights \n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.D_km!-Tuple{Array{Float64}, Array{TransportProperties.TransportData}, Float64, Float64, Array{Float64}, Array{Float64}}","page":"Home","title":"TransportProperties.D_km!","text":"Function for calculating diffusion coefficient of a species in a mixture\n\nUsage\n\nD_km!(Dkm, sp_trd, T, p, molwt, molefracs)\n\nDkm : Array for storing the mixture diffusion coefficients\nsp_trd : Array of the type TransportData\nT : temperature in K \np : Pressure in Pa \nmolwt : species molecular weights \nmolefracs : species mole fractions \n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.create_transport_data-Tuple{Array{String}, AbstractString}","page":"Home","title":"TransportProperties.create_transport_data","text":"A function to read the transport.dat file and create the structure TransportData\n\nUsage\n\ncreate_transport_data(gasphase, trans_file)\n\ngasphase: list of gasphase species \ntrans_file: path to the transport.dat file\n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.thermal_coductivity-Tuple{Array{TransportProperties.TransportData}, Float64, Float64, IdealGas.SpeciesThermoObj, Array{Float64}}","page":"Home","title":"TransportProperties.thermal_coductivity","text":"Calculates the thermal conductivity of the mixture \n\nUsage\n\nthermalcoductivity(sptrd, T, p, thermoobj, molefracs) sptrd : Species transport data T : Temperature in K  p : Pressure in Pa  thermo_ob : SpeciesThermoObj  molefracs : Species mole fractions \n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.transport_properties-Tuple{AbstractString, AbstractString}","page":"Home","title":"TransportProperties.transport_properties","text":"This function is for testing the transport code\n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.viscosity-Tuple{Array{TransportProperties.TransportData}, Float64, Array{Float64}, Array{Float64}}","page":"Home","title":"TransportProperties.viscosity","text":"viscosity(sptrd::Array{TransportData}, T::Float64, molwt::Array{Float64}, molefracs::Array{Float64}) Calculation of mixture viscosity in Kg/m-s\n\nUsage\n\nviscosity(sp_trd, T, molwt, mole_fracs)\n\nsp_trd: Species transport data\nT: Temperature\nmolwt : molecular weight vector \nmole_fracs : Mole fractions vector \n\n\n\n\n\n","category":"method"},{"location":"#TransportProperties.viscosity-Tuple{Array{TransportProperties.TransportData}, Float64, Array{Float64}}","page":"Home","title":"TransportProperties.viscosity","text":"viscosity(sp_trd::Array{TransportData}, T::Float64, molwt::Array{Float64}) Function for the calculation of pure species viscosity in Kg/m-s\n\nUsage\n\nviscosity(sp_trd, T, molwt)\n\nsp_trd : Array of species transport data\nT : Temperature\nmolwt : molecular weights array\n\n\n\n\n\n","category":"method"},{"location":"#Diffusion-coefficient-calculation","page":"Home","title":"Diffusion coefficient calculation","text":"","category":"section"},{"location":"#Binary-diffusion-coefficients","page":"Home","title":"Binary diffusion coefficients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The binary diffusion coefficient is expressed as ","category":"page"},{"location":"","page":"Home","title":"Home","text":"D_jk = frac316 frac sqrt2pi N_Ak_B^3T^3m_jk ppi sigma_jk^2 Omega^(11) ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here N_A is the Avogadro's number, k_B is the Boltzmann constant, p is the pressure, and T is the temperature. The reduced molar mass of the species pair (j,k) is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"m_jk = fracm_jm_km_j+m_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"The collision integral Omega^(11) is determined using the reduced temperature T^*_jk and the reduced dipole moment delta^*_jk","category":"page"},{"location":"","page":"Home","title":"Home","text":"T^*_jk = frack_BTepsilon_jk","category":"page"},{"location":"","page":"Home","title":"Home","text":"delta^*_jk = frac12 fracmu^2_jkepsilon_jksigma_jk^3","category":"page"},{"location":"","page":"Home","title":"Home","text":"The reduced dipole moment depends on the polarizability of the interacting molecules. In the case where both molecules are  either polar or non-polar, then it follows","category":"page"},{"location":"","page":"Home","title":"Home","text":"epsilon_jk = sqrtepsilon_j epsilon_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"mu_jk^2 = mu_j mu_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"and the reduced collision diameter sigma_jk is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"sigma_jk = fracsigma_k+sigma_j2","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the case of interaction between a polar and non-polar molecule","category":"page"},{"location":"","page":"Home","title":"Home","text":"epsilon_jk= xi^2  sqrtepsilon_j epsilon_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"sigma_jk = frac12 (sigma_j + sigma_k) xi^-16","category":"page"},{"location":"","page":"Home","title":"Home","text":"mu_jk= 0","category":"page"},{"location":"","page":"Home","title":"Home","text":"xi = 1+frac14 alpha_n^* mu_p^* sqrt fracepsilon_pepsilon_n ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the subscripts p and n represents either j or k. If j is polar species, then the subscript p refers to that species","category":"page"},{"location":"","page":"Home","title":"Home","text":"alpha_n^* = fracalpha_nsigma_n^3","category":"page"},{"location":"","page":"Home","title":"Home","text":"mu_p^* = fracmu_psqrtepsilon_psigma_p^3","category":"page"},{"location":"","page":"Home","title":"Home","text":"The estimation of Omega^(11) is a table look up procedure using the values of T^*_jk and delta^*_jk.","category":"page"},{"location":"#Mixture-diffusion-coefficients","page":"Home","title":"Mixture diffusion coefficients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The mixture diffusion coefficients are calculated from","category":"page"},{"location":"","page":"Home","title":"Home","text":"D_km = frac1-Y_ksum_jne k^N X_jD_jk","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above equation, Y_k is the mass fraction of the species k, and X_j is the mole fraction of species j. N is the total number of species","category":"page"},{"location":"#Viscosity","page":"Home","title":"Viscosity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The viscosity of the mixture is calculated using pure species viscosity. The pure species viscosity is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"eta_k = frac516 fracsqrtpi m_k k_BTN_Api sigma_k^2 Omega^(22)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Lennard-Jones collision integral Omega^(22) is estimated using a table lookup procedure and depends on the reduced temperature. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"T^*_k = frack_BTepsilon_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"and the reduced dipole moment","category":"page"},{"location":"","page":"Home","title":"Home","text":"delta^*_k = frac12 fracmu_k^2epsilon_k sigma_k^3","category":"page"},{"location":"","page":"Home","title":"Home","text":"The viscosity of the mixture is then defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"eta = sum_k=1^N fracX_keta_ksumj=1^K X_jPhi_kj","category":"page"},{"location":"","page":"Home","title":"Home","text":"Phi_kj= frac1sqrt8 left(1+fracM_kM_jright)^-12 left( 1+ left(fraceta_keta_jright)^12 left(fracM_jM_kright)^14right)^2","category":"page"},{"location":"#Thermal-conductivity","page":"Home","title":"Thermal conductivity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Similar to calculating viscosity, the thermal conductivity of a mixture is calculated from the pure species thermal conductivity.  The pure species thermal conductivity is defined as","category":"page"},{"location":"","page":"Home","title":"Home","text":"lambda_k = fraceta_kM_k left( f_t C_vt + f_r C_vr + f_v C_vv right)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_t = frac52left( 1-frac2pi fracC_vrC_vt fracAB right)","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_v = fracrho D_kketa_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_r = f_v left( 1+ frac2pi fracABright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = 25-f_v","category":"page"},{"location":"","page":"Home","title":"Home","text":"B = Z_rot + frac2pi left( frac53 fracC_vrR + f_vright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The molar heat capacity C_v for rotational, vibrational or transnational mode depends on the molecule's geometry. For linear molecules","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vtR = frac32","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vrR = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vvR = C_v  - 25R","category":"page"},{"location":"","page":"Home","title":"Home","text":"C_v = C_p -R","category":"page"},{"location":"","page":"Home","title":"Home","text":"For non-linear molecules","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vtR = frac32","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vrR = frac32","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracC_vvR = C_v  - 3R","category":"page"},{"location":"","page":"Home","title":"Home","text":"C_v = C_p -R","category":"page"},{"location":"#Executing-the-code","page":"Home","title":"Executing the code","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To see all properties as a screen output","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties\njulia>transport_properties(\"transport.xml\", \"lib_dir\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above call, it is assumed that the input file transport.xml is present in the working directory and lib_dir is the path to the lib directory relative to the current working directory. The structure of the transport.xml input file is shown below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<trans>\n\t<gasphase>CH4 H2O H2 CO CO2 O2 N2</gasphase>\n\t<molefractions>CH4=0.125, H2O=0.252, CO2=0.084, N2=0.539</molefractions>\n\t<T>1073.15</T>\n\t<p>1e5</p>\n</trans>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The meaning of the different xml elements are as follows","category":"page"},{"location":"","page":"Home","title":"Home","text":"<gasphase> : list of gasphase species separated by space\n<molefractions> : mole fractions of the species (instead of <molefractions>, <massfractions> may also be specified)\n<T> : temperature in K\n<p> : pressure in Pa","category":"page"},{"location":"#Input-file-download","page":"Home","title":"Input file download","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The xml input file and the lib directory containig other required input files may be downloaded from here.","category":"page"},{"location":"#Calculation-of-properties","page":"Home","title":"Calculation of properties","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following methods may be used to calculate the properties of pure species or mixtures ","category":"page"},{"location":"#Pure-species-voscosity","page":"Home","title":"Pure species voscosity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>mu = viscosity(sp_tr_data,T,thermo_all.molwt)","category":"page"},{"location":"#Mixture-viscosity","page":"Home","title":"Mixture viscosity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>mu = viscosity(sp_tr_data,T,thermo_all.molwt,mole_fracs)    ","category":"page"},{"location":"#Binary-diffusion-coefficients-2","page":"Home","title":"Binary diffusion coefficients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>Dij = D_ij(sp_tr_data,T,p,thermo_all.molwt)","category":"page"},{"location":"#Mixture-diffusion-coefficients-2","page":"Home","title":"Mixture diffusion coefficients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>Dkm = zeros(length(gasphase))\njulia>D_km!(Dkm,sp_tr_data,T,p,thermo_all.molwt,mole_fracs)        ","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>Dkm = zeros(length(gasphase))\njulia>Dij = D_ij(sp_tr_data,T,p,thermo_all.molwt)\njulia>D_km!(Dkm, bdc, mole_fracs, thermo_all.molwt)","category":"page"},{"location":"#Thermal-conductivity-2","page":"Home","title":"Thermal conductivity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia>using TransportProperties, IdealGas\njulia>gasphase = [\"CH4\", \"CO2\", \"H2O\", \"H2\", \"CO\"]\njulia>sp_tr_data = create_transport_data(gasphase,\"transport.dat\")\njulia>thermo_all = IdealGas.create_thermo(gasphase,\"therm.dat\")\njulia>tc = thermal_coductivity(sp_tr_data,T,p,thermo_all,mole_fracs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above calls mole_fracs is an array of mole fractions; must be of same size as the number of  gasphase species. T and p are respectively the temperature (K) and pressure (Pa)","category":"page"},{"location":"#Output","page":"Home","title":"Output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The method transport_properties creates a screen output","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pure species viscosity:\n     Species \t viscosity(Kg/m-s)\n-----------------------------------\n         CH4 \t      2.8992e-05\n         H2O \t      3.8879e-05\n          H2 \t      2.0596e-05\n          CO \t      4.2735e-05\n         CO2 \t      4.3121e-05\n          O2 \t      5.0182e-05\n          N2 \t      4.3463e-05\nMixture viscosity: 4.1079e-05 Kg/m-s\n\nMixture diffusion coefficients:\n     Species \t Diff.Coeff(m^2/s)\n-----------------------------------\n         CH4 \t      2.2091e-04\n         H2O \t      2.5665e-04\n          H2 \t      6.8730e-04\n          CO \t      1.9235e-04\n         CO2 \t      1.4955e-04\n          O2 \t      1.9554e-04\n          N2 \t      1.8077e-04\n\nBinary diffusion coefficients:\nNote: self diffusion coefficients are not printed below:\n-----------------------------------\n\t        CH4\t        H2O\t         H2\t         CO\t        CO2\t         O2\t         N2\n         CH4\t0.0000e+00\t2.4993e-04\t6.3858e-04\t2.0108e-04\t1.6734e-04\t2.0549e-04\t2.0277e-04\t\n         H2O\t2.4993e-04\t0.0000e+00\t8.2047e-04\t2.3675e-04\t1.8888e-04\t2.4327e-04\t2.3919e-04\t\n          H2\t6.3858e-04\t8.2047e-04\t0.0000e+00\t6.6030e-04\t5.8600e-04\t6.9276e-04\t6.6647e-04\t\n          CO\t2.0108e-04\t2.3675e-04\t6.6030e-04\t0.0000e+00\t1.4726e-04\t1.8413e-04\t1.8318e-04\t\n         CO2\t1.6734e-04\t1.8888e-04\t5.8600e-04\t1.4726e-04\t0.0000e+00\t1.4794e-04\t1.4849e-04\t\n          O2\t2.0549e-04\t2.4327e-04\t6.9276e-04\t1.8413e-04\t1.4794e-04\t0.0000e+00\t1.8572e-04\t\n          N2\t2.0277e-04\t2.3919e-04\t6.6647e-04\t1.8318e-04\t1.4849e-04\t1.8572e-04\t0.0000e+00\t\n\nThermal conductivity of mixture: 8.1707e-02 (W/m-K)","category":"page"}]
}
